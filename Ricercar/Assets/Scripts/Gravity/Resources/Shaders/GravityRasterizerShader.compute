#include "Assets/Scripts/Gravity/Resources/Shaders/GravityShaderResources.cginc"
#pragma kernel CalculateMassDistribution
#pragma kernel GenerateGravityMap
#pragma kernel ClearOutputBuffer

#define MULTIPLICATION_FACTOR 10000.0

Texture2D<float4> ImageInput;
RWTexture2D<float4> GravityMapOutput;

RWStructuredBuffer<int> MassDistributionOutput;
AppendStructuredBuffer<float2> OccupiedTexelsAppendBuffer;
StructuredBuffer<float2> OccupiedTexelsStructuredBuffer;

StructuredBuffer<uint> OccupiedTexelsCount;
uint InputWidth;
uint InputHeight;

[numthreads(3, 1, 1)]
void ClearOutputBuffer(uint3 id : SV_DispatchThreadID)
{
    // this kernel just exists to empty the given buffer.
    MassDistributionOutput[id.x] = 0;
}

[numthreads(1, 1, 1)]
void CalculateMassDistribution(uint3 id : SV_DispatchThreadID)
{
    // just count up all the "mass" in the image (the sum of all the alpha values)

    float4 texel = ImageInput[id.xy];
    
    InterlockedAdd(MassDistributionOutput[0], (int)(texel.a * MULTIPLICATION_FACTOR));

    if (texel.a > 0)
        OccupiedTexelsAppendBuffer.Append(float2(id.x, id.y));
}

[numthreads(32, 32, 1)]
void GenerateGravityMap(uint3 id : SV_DispatchThreadID)
{
    float massDistribution = (float)MassDistributionOutput[0] / MULTIPLICATION_FACTOR;

    float2 position = float2(id.x, id.y);

    float3 totalGravityForce = float3(0, 0, 0);

    uint inputXOffset = (DEFAULT_BAKED_SIZE - InputWidth) / 2;
    uint inputYOffset = (DEFAULT_BAKED_SIZE - InputHeight) / 2;

    // OccupiedTexelsStructuredBuffer is a buffer which contains the coordinates of each
    // occupied (alpha nonzero) texel in the input texture. this is faster than iterating over every single
    // pixel, since most will be empty
    for (uint i = 0; i < OccupiedTexelsCount[0]; i++)
    {
        uint2 inputTexelPosition = OccupiedTexelsStructuredBuffer[i];

        float2 texelPosition = float2(inputTexelPosition.x + inputXOffset, inputTexelPosition.y + inputYOffset);
        uint x = (uint)texelPosition.x;
        uint y = (uint)texelPosition.y;

        // prevent us from checking the gravity from a texel to itself.
        int notSameTexel = or(when_neq(id.x, x), when_neq(id.y, y));

        float4 texel = ImageInput[inputTexelPosition];

        // mass is normalized by total 'mass' (sum of alpha values) so resulting map will always have an
        // overall mass of 1
        float3 calculation = CalculateGravity(texelPosition, position, texel.a / massDistribution, 1.0);

        totalGravityForce += float3(notSameTexel * calculation.x, notSameTexel * calculation.y, calculation.z);
	}

    // we also take note of how much this texel contributes to the centre of mass of the input
    float2 centreOfMassContribution = position * ImageInput[id.xy].a / massDistribution;

    // atomic operations can only be applied to integers, so we multiply by a large number and cast it to an int
    InterlockedAdd(MassDistributionOutput[1], (int)(centreOfMassContribution.x * MULTIPLICATION_FACTOR));
    InterlockedAdd(MassDistributionOutput[2], (int)(centreOfMassContribution.y * MULTIPLICATION_FACTOR));

    GravityMapOutput[position] = float4(totalGravityForce, 1);
}